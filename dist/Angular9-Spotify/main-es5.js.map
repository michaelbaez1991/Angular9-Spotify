{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Crud/add/add.component.ts","webpack:///src/app/Crud/add/add.component.html","webpack:///src/app/Crud/read/read.component.ts","webpack:///src/app/Crud/read/read.component.html","webpack:///src/app/Crud/update/update.component.ts","webpack:///src/app/Crud/update/update.component.html","webpack:///src/app/Modelo/Users.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/artista/artista.component.ts","webpack:///src/app/artista/artista.component.html","webpack:///src/app/backend-java/backend-java.component.ts","webpack:///src/app/backend-java/backend-java.component.html","webpack:///src/app/pipes/domseguro.pipe.ts","webpack:///src/app/pipes/noimage.pipe.ts","webpack:///src/app/releases/releases.component.ts","webpack:///src/app/releases/releases.component.html","webpack:///src/app/search/search.component.ts","webpack:///src/app/search/search.component.html","webpack:///src/app/services/crud-java.service.ts","webpack:///src/app/services/spotify.service.ts","webpack:///src/app/shared/cards/cards.component.ts","webpack:///src/app/shared/cards/cards.component.html","webpack:///src/app/shared/loading/loading.component.ts","webpack:///src/app/shared/loading/loading.component.html","webpack:///src/app/shared/navbar/navbar.component.ts","webpack:///src/app/shared/navbar/navbar.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AddComponent","router","serviceCrud","usu","postUsers","subscribe","data","alert","navigate","guardar","selector","templateUrl","styleUrls","ReadComponent","getUsers","users","user","localStorage","setItem","toString","deleteUsers","filter","p","UpdateComponent","service","editar","getItem","getUsersId","updateUsers","console","log","actualizar","Users","AppComponent","title","newReleases","ROUTES","path","component","children","pathMatch","redirectTo","AppModule","forRoot","useHash","declarations","imports","providers","bootstrap","ArtistaComponent","actRouter","spotify","topTracks","token","accessToken","typeToken","isLoading","getToken","access_token","token_type","setTimeout","params","getArtist","getTopTracks","artist","idArtist","BackendJavaComponent","DomSeguroPipe","domSanitizer","value","url","bypassSecurityTrustResourceUrl","name","NoimagePipe","images","length","ReleasesComponent","spotifyService","getNewReleases","SearchComponent","CrudJavaService","http","get","post","put","delete","providedIn","SpotifyService","credentials","clientId","clientSecret","Base64credentials","segurity","btoa","httpOptions","headers","Authorization","urlToken","bodyToken","set","query","getQuery","pipe","albums","items","term","artists","tracks","CardsComponent","item","artistId","type","LoadingComponent","NavbarComponent","environment","production","bootstrapModule","catch","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CrudJavaService } from 'src/app/services/crud-java.service';\nimport { Users } from 'src/app/Modelo/Users';\n\n@Component({\n  selector: 'app-add',\n  templateUrl: './add.component.html',\n  styleUrls: ['./add.component.css']\n})\nexport class AddComponent implements OnInit {\n  usu: Users = new Users();\n\n  constructor(private router: Router, private serviceCrud: CrudJavaService) { }\n\n  ngOnInit(): void {\n  }\n\n  guardar() {\n    this.serviceCrud.postUsers(this.usu)\n    .subscribe(\n      data => {\n        // console.log(data);\n        alert('Se agrego con exito!!');\n        this.router.navigate(['BackendJava/listar']);\n      }\n    );\n  }\n}\n","<div class=\"container col-md-6\">\n    <div class=\"card\">\n        <div class=\"card-header\">\n            <h3 style=\"color:black;\">Agregar Usuarios</h3>\n        </div>\n        <div class=\"card-body\" >\n            <form action=\"\">\n                <div class=\"form-group\">\n                    <label for=\"\" style=\"color:black;\">Nombre: </label>\n                    <input [(ngModel)]=\"usu.nombre\" name=\"nombre\" type=\"text\" class=\"form-control\">\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"\" style=\"color:black;\">Apellido: </label>\n                    <input [(ngModel)]=\"usu.apellido\" name=\"apellido\" type=\"text\" class=\"form-control\">\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"\" style=\"color:black;\">Email: </label>\n                    <input [(ngModel)]=\"usu.email\" name=\"email\" type=\"text\" class=\"form-control\">\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"\" style=\"color:black;\">Profesión: </label>\n                    <input [(ngModel)]=\"usu.profesion\" name=\"profesion\" type=\"text\" class=\"form-control\">\n                </div>\n                <button (click)=\"guardar()\" class=\"btn btn-danger\">Guardar</button>\n            </form>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CrudJavaService } from 'src/app/services/crud-java.service';\nimport { Users } from 'src/app/Modelo/Users';\n\n@Component({\n  selector: 'app-read',\n  templateUrl: './read.component.html',\n  styleUrls: ['./read.component.css']\n})\nexport class ReadComponent implements OnInit {\n  users: Users[];\n  constructor(private serviceCrud: CrudJavaService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.serviceCrud.getUsers()\n    .subscribe(\n      data => {\n        // console.log(data);\n        this.users = data;\n      }\n    );\n  }\n\n  editar(user: Users): void {\n    localStorage.setItem('id', user.id.toString());\n    this.router.navigate(['BackendJava/editar']);\n  }\n\n  eliminar(user: Users) {\n    this.serviceCrud.deleteUsers(user)\n    .subscribe(\n      data => {\n        // console.log(data);\n        this.users = this.users.filter(p => p !== user);\n        alert('Usuario eliminado');\n    });\n  }\n}\n","<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-header\">\n            <h3 style=\"color:black;\">Usuarios</h3>\n        </div>\n        <div class=\"card-body\" >\n            <table class=\"table table-hover\">\n                <thead style=\"text-align: center;\">\n                    <tr>\n                        <th style=\"color:black;\">ID</th>\n                        <th style=\"color:black;\">APELLIDO</th>\n                        <th style=\"color:black;\">CORREO</th>\n                        <th style=\"color:black;\">NOMBRE</th>\n                        <th style=\"color:black;\">PROFESION</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr class=\"text-center\" *ngFor=\"let user of users\">\n                        <td style=\"color:black;\">{{ user.id }}</td>\n                        <td style=\"color:black;\">{{ user.apellido }}</td>\n                        <td style=\"color:black;\">{{ user.email }}</td>\n                        <td style=\"color:black;\">{{ user.nombre }}</td>\n                        <td style=\"color:black;\">{{ user.profesion }}</td>\n                        <td>\n                            <a (click)=\"editar(user)\" class=\"btn btn-warning\" role=\"button\">Editar</a>\n                            <a (click)=\"eliminar(user)\" style=\"margin-left: 10px;\" class=\"btn btn-danger\" role=\"button\">Eliminar</a>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CrudJavaService } from 'src/app/services/crud-java.service';\nimport { Users } from 'src/app/Modelo/Users';\n\n@Component({\n  selector: 'app-update',\n  templateUrl: './update.component.html',\n  styleUrls: ['./update.component.css']\n})\nexport class UpdateComponent implements OnInit {\n  user: Users = new Users();\n  constructor(private router: Router, private service: CrudJavaService) { }\n\n  ngOnInit(): void {\n    this.editar();\n  }\n\n  editar() {\n    const id = localStorage.getItem('id');\n    this.service.getUsersId(+ id)\n    .subscribe(\n      data => {\n        // console.log(data);\n        this.user = data;\n      }\n    );\n  }\n\n  actualizar(user: Users) {\n    this.service.updateUsers(user)\n    .subscribe(\n      data => {\n        console.log(data);\n        this.user = data;\n        alert('Usuario actualizado correctamente');\n        this.router.navigate(['BackendJava/listar']);\n      }\n    );\n  }\n\n}\n","<div class=\"container col-md-6\">\n    <div class=\"card\">\n        <div class=\"card-header\">\n            <h3 style=\"color:black;\">Modificar Usuarios</h3>\n        </div>\n        <div class=\"card-body\" >\n            <form action=\"\">\n                <div class=\"form-group\">\n                    <label for=\"\" style=\"color:black;\">Nombre: </label>\n                    <input [(ngModel)]=\"user.nombre\" name=\"nombre\" type=\"text\" class=\"form-control\">\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"\" style=\"color:black;\">Apellido: </label>\n                    <input [(ngModel)]=\"user.apellido\" name=\"apellido\" type=\"text\" class=\"form-control\">\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"\" style=\"color:black;\">Email: </label>\n                    <input [(ngModel)]=\"user.email\" name=\"email\" type=\"text\" class=\"form-control\">\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"\" style=\"color:black;\">Profesión: </label>\n                    <input [(ngModel)]=\"user.profesion\" name=\"profesion\" type=\"text\" class=\"form-control\">\n                </div>\n                <button (click)=\"actualizar(user)\" class=\"btn btn-danger\">Actualizar</button>\n            </form>\n        </div>\n    </div>\n</div>","export class Users {\r\n    id: number;\r\n    apellido: `String`;\r\n    email: `String`;\r\n    nombre: `String`;\r\n    profesion: `String`;\r\n}\r\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent {\n  title = 'Angular9-Spotify';\n  newReleases: any[] = [];\n  isLoading: boolean;\n\n  constructor(private router: Router) { }\n  // ngOnInit(): void {\n  // }\n}\n","<app-navbar></app-navbar>\n\n<div class=\"container\" style=\"padding-top: 15px\">\n  <router-outlet></router-outlet>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { ReleasesComponent } from './releases/releases.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CardsComponent } from './shared/cards/cards.component';\nimport { LoadingComponent } from './shared/loading/loading.component';\nimport { NoimagePipe } from './pipes/noimage.pipe';\nimport { DomSeguroPipe } from './pipes/domseguro.pipe';\nimport { NavbarComponent } from './shared/navbar/navbar.component';\nimport { ArtistaComponent } from './artista/artista.component';\nimport { BackendJavaComponent } from './backend-java/backend-java.component';\nimport { ReadComponent } from './Crud/read/read.component';\nimport { AddComponent } from './Crud/add/add.component';\nimport { UpdateComponent } from './Crud/update/update.component';\nimport { FormsModule } from '@angular/forms';\nimport { CrudJavaService } from '../app/services/crud-java.service';\nimport { SearchComponent } from './search/search.component';\n\nexport const ROUTES: Routes = [\n  { path: 'lanzamientos', component: ReleasesComponent, children: [\n    {\n      path: 'lanzamientos',\n      component: ReleasesComponent\n    }\n  ]},\n  { path: '', pathMatch: 'full', redirectTo: 'lanzamientos' },\n  { path: 'artist/:id', component: ArtistaComponent },\n  { path: 'BackendJava', component: BackendJavaComponent, children: [\n      { path: 'listar', component: ReadComponent },\n      { path: 'agregar', component: AddComponent },\n      { path: 'editar', component: UpdateComponent },\n      { path: 'buscar', component: SearchComponent },\n    ]\n  },\n  { path: 'BackendJava/listar', component: ReadComponent },\n  { path: 'BackendJava/agregar', component: AddComponent },\n  { path: 'BackendJava/editar', component: UpdateComponent },\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ReleasesComponent,\n    CardsComponent,\n    LoadingComponent,\n    NoimagePipe,\n    DomSeguroPipe,\n    NavbarComponent,\n    ArtistaComponent,\n    BackendJavaComponent,\n    ReadComponent,\n    AddComponent,\n    UpdateComponent,\n    SearchComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    RouterModule.forRoot(ROUTES, { useHash: true })\n  ],\n  providers: [CrudJavaService],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { SpotifyService } from '../services/spotify.service';\n\n@Component({\n  selector: 'app-artista',\n  templateUrl: './artista.component.html',\n  // styleUrls: ['./artista.component.css']\n})\n\nexport class ArtistaComponent implements OnInit {\n  artist: any;\n  isLoading: boolean;\n  topTracks: any[] = [];\n\n  public token = {\n    accessToken: '',\n    typeToken: ''\n  };\n\n  constructor(private actRouter: ActivatedRoute, private spotify: SpotifyService) {\n    this.isLoading = true;\n\n    this.spotify.getToken()\n    .subscribe(\n      (data: any) =>  {\n        // console.log(data);\n        this.token.accessToken = data.access_token;\n        this.token.typeToken = data.token_type;\n      }\n    );\n\n    setTimeout(() => {\n      this.actRouter.params.subscribe(params => {\n        this.getArtist(params.id);\n        this.getTopTracks(params.id);\n      });\n    }, 1500);\n  }\n\n  private getArtist(id: string) {\n    this.spotify.getArtist(id, this.token.typeToken, this.token.accessToken).subscribe(artist => {\n      this.artist = artist;\n      this.isLoading = false;\n    });\n  }\n\n  private getTopTracks(idArtist: string) {\n    this.spotify.getTopTracks(idArtist, this.token.typeToken, this.token.accessToken)\n      .subscribe(topTracks => {\n        this.topTracks = topTracks;\n      });\n  }\n\n  ngOnInit(): void {\n    // throw new Error('Method not implemented.');\n  }\n}\n","<app-loading *ngIf=\"isLoading\"></app-loading>\n\n<div class=\"row animated fadeIn\" *ngIf=\"!isLoading\">\n    <div class=\"col-2\">\n        <img [src]=\"artist.images | noimage\" class=\"img-thumbnail img-circle\">\n    </div>\n\n    <div class=\"col\">\n        <h3>{{ artist.name }}</h3>\n        <p>\n          <a [href]=\"artist.external_urls.spotify\" target=\"_blank\">\n          Ir a la pagina del artista\n          </a>\n        </p>\n    </div>\n\n    <div class=\"col-4 text-right\">\n      <button routerLink=\"/lanzamientos\" class=\"btn btn-outline-danger\">\n        Atrás\n      </button>\n    </div>\n</div>\n\n<div class=\"row m-5\">\n    <div class=\"col\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th>Foto</th>\n                    <th>Albúm</th>\n                    <th>Canción</th>\n                    <th>Avances</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let track of topTracks\">\n                    <td>\n                        <img [src]=\"track.album.images | noimage\" class=\"img-thumb\">\n                    </td>\n                    <td>{{ track.album.name }}</td>\n                    <td>{{ track.name }}</td>\n                    <td>\n                        <iframe [src]=\"track.uri | domseguro\" width=\"300\" height=\"80\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-backend-java',\n  templateUrl: './backend-java.component.html',\n  styleUrls: ['./backend-java.component.css']\n})\nexport class BackendJavaComponent implements OnInit {\n\n  constructor(private router: Router) { }\n  Listar() {\n    this.router.navigate(['listar']);\n  }\n\n  Agregar() {\n    this.router.navigate(['agregar']);\n  }\n\n  Editar() {\n    this.router.navigate(['editar']);\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div style=\"text-align:center\">\n    <h1>\n        2 Parte (Backend Java)\n    </h1>\n    <img src=\"\" alt=\"\" width=\"130\">\n</div>\n\n<div class=\"container\">\n    <a class=\"btn btn-info\" role=\"button\" routerLink=\"agregar\">Nuevo</a>   \n    <a class=\"btn btn-info\" role=\"button\" routerLink=\"listar\" style=\"margin-left: 10px;\">Listar todos los usuarios</a>\n    <a class=\"btn btn-info\" role=\"button\" routerLink=\"buscar\" style=\"margin-left: 10px;\">Buscar un usuario</a>\n</div>\n\n<hr>\n<router-outlet></router-outlet>","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'domseguro'\n})\n\nexport class DomSeguroPipe implements PipeTransform {\n\n  constructor(private domSanitizer: DomSanitizer) { }\n\n  transform(value: string): any {\n    const url = 'https://open.spotify.com/embed?uri=';\n    return this.domSanitizer.bypassSecurityTrustResourceUrl(url + value);\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'noimage'\n})\nexport class NoimagePipe implements PipeTransform {\n  transform(images: any[]): string {\n    if (!images) {\n      return 'assets/img/noimage.png';\n    }\n\n    if (images.length > 0) {\n      return images[0].url;\n    } else {\n      return 'assets/img/noimage.png';\n    }\n  }\n}","import { Component, OnInit } from '@angular/core';\nimport { SpotifyService } from '../services/spotify.service';\nimport { AppComponent } from '../app.component';\n\n@Component({\n  selector: 'app-releases',\n  templateUrl: './releases.component.html',\n  styleUrls: ['./releases.component.css']\n})\nexport class ReleasesComponent implements OnInit {\n  newReleases: any[] = [];\n  isLoading: boolean;\n\n  public token = {\n    accessToken: '',\n    typeToken: ''\n  };\n\n  constructor(private spotifyService: SpotifyService) {\n    this.isLoading = true;\n\n    this.spotifyService.getToken()\n    .subscribe(\n      (data: any) =>  {\n        // console.log(data);\n        this.token.accessToken = data.access_token;\n        this.token.typeToken = data.token_type;\n      }\n    );\n  }\n\n  ngOnInit(): void {\n    setTimeout(() => {\n      this.spotifyService.getNewReleases(this.token.typeToken, this.token.accessToken)\n      .subscribe((data: any) => {\n        // console.log(data);\n        this.newReleases = data;\n        this.isLoading = false;\n      });\n    }, 1000);\n  }\n}\n","<app-loading *ngIf=\"isLoading\"></app-loading>\n<app-cards [items]=\"newReleases\"></app-cards>","import { Component, OnInit } from '@angular/core';\nimport { CrudJavaService } from '../services/crud-java.service';\nimport { Router } from '@angular/router';\nimport { Users } from '../Modelo/Users';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n  user: Users = new Users();\n  constructor(private serviceCrud: CrudJavaService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  editar(user: Users): void {\n    localStorage.setItem('id', user.id.toString());\n    this.router.navigate(['BackendJava/editar']);\n  }\n\n}\n","<div class=\"container col-md-6\">\n    <div class=\"card\">\n        <div class=\"card-header\">\n            <h3 style=\"color:black;\">Buscar usuario por ID</h3>\n        </div>\n        <div class=\"card-body\" >\n            <form action=\"\">\n                <div class=\"form-group\">\n                    <label for=\"\" style=\"color:black;\">Ingrese el id: </label>\n                    <input [(ngModel)]=\"user.id\" name=\"id\" type=\"text\" class=\"form-control\">\n                </div>\n\n                <button (click)=\"editar(user)\" class=\"btn btn-danger\">Buscar</button>\n            </form>\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Users } from '../Modelo/Users';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudJavaService {\n  constructor(private http: HttpClient) {  }\n\n  url = 'http://localhost:8080/backend/globalTech';\n\n  getUsers() {\n    return this.http.get<Users[]>(this.url);\n  }\n\n  postUsers(user: Users) {\n    return this.http.post<Users[]>(this.url, user);\n  }\n\n  getUsersId(id: number) {\n    return this.http.get<Users>(this.url + '/' + id);\n  }\n\n  updateUsers(user: Users) {\n    return this.http.put<Users>(this.url + '/' + user.id, user);\n  }\n\n  deleteUsers(user: Users){\n    return this.http.delete<Users>(this.url  + '/' + user.id);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders,  HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SpotifyService {\n\n  public credentials = {\n    clientId: 'f031f6937e914cba9c34c22c90f7bafa',\n    clientSecret: 'ce2d20ed3a3048e58c3359442742d704',\n    accessToken: '',\n    typeToken: ''\n  };\n\n  public Base64credentials = {\n    segurity: btoa(this.credentials.clientId + ':' + this.credentials.clientSecret)\n  };\n\n  public httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: 'Basic ' + this.Base64credentials.segurity,\n    })\n  };\n\n  constructor(private http: HttpClient) {  }\n\n  getToken() {\n    const urlToken = 'https://accounts.spotify.com/api/token';\n    const bodyToken = new HttpParams().set('grant_type', 'client_credentials');\n\n    return this.http.post(urlToken, bodyToken, this.httpOptions);\n  }\n\n  getQuery(query: string, typeToken: string, accessToken: string) {\n    const url = `https://api.spotify.com/v1/${query}`;\n    const headers = new HttpHeaders({\n      Authorization:\n      typeToken + ' ' + accessToken\n    });\n\n    return this.http.get(url, { headers });\n  }\n\n  getNewReleases(typeToken: string, accessToken: string) {\n    return this.getQuery('browse/new-releases?country=co&limit=20', typeToken, accessToken).pipe(\n      map((data: any) => data.albums.items)\n    );\n  }\n\n  getArtists(term: string, typeToken: string, accessToken: string) {\n    return this.getQuery(`search?q=${term}&type=artist&limit=15`, typeToken, accessToken).pipe(\n      map((data: any) => data.artists.items)\n    );\n  }\n\n  getArtist(id: string, typeToken: string, accessToken: string) {\n    return this.getQuery(`artists/${id}`, typeToken, accessToken);\n  }\n\n  getTopTracks(idArtist: string, typeToken: string, accessToken: string) {\n    return this.getQuery(`artists/${idArtist}/top-tracks?country=us`, typeToken, accessToken)\n      .pipe(map((data: any) => data.tracks));\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-cards',\n  templateUrl: './cards.component.html',\n  // styleUrls: ['./cards.component.css']\n})\n\nexport class CardsComponent implements OnInit {\n  @Input() items: any[] = [];\n\n  constructor(private router: Router) { }\n\n  ngOnInit() { }\n\n  showArtist(item: any) {\n    const artistId = item.id;\n    this.router.navigate(['/artist', artistId]);\n  }\n\n  showItem(item: any) {\n    if (item.type === 'artist') {\n      this.router.navigate(['/artist', item.id]);\n    }\n  }\n}\n","<div class=\"card-columns m-4 animated fadeIn\">\n    <div *ngFor=\"let item of items\" class=\"card\">\n        <img (click)=\"showItem(item)\" [src]=\"item.images | noimage\" class=\"card-img-top puntero\" alt=\"Card Image Top\" />\n        <div class=\"card-body\">\n            <h5 class=\"card-title\">{{ item.name }}</h5>\n            <p class=\"card-text\">\n                <span (click)=\"showArtist(artist)\" *ngFor=\"let artist of item.artists\" class=\"badge badge-pill badge-primary puntero\">{{ artist.name }}</span>\n            </p>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-loading',\n  templateUrl: './loading.component.html',\n  // styleUrls: ['./loading.component.css']\n})\nexport class LoadingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"row text-center animated fadeIn\">\n    <div class=\"col\">\n        <i class=\"fa fa-sync fa-spin fa-5x\"></i>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  // styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<nav class=\"navbar navbar-expand-md navbar-dark bg-dark\">\n    <a class=\"navbar-brand\" href=\"#\">\n      <img src=\"assets/img/banner-ico.png\" width=\"30\" height=\"30\" alt=\"\" />\n      Spotify Integration\n    </a>\n    \n    <button\n      class=\"navbar-toggler\"\n      type=\"button\"\n      data-toggle=\"collapse\"\n      data-target=\"#navbarSupportedContent\"\n      aria-controls=\"navbarSupportedContent\"\n      aria-expanded=\"false\"\n      aria-label=\"Toggle navigation\"\n    >\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n  \n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul class=\"navbar-nav mr-auto\">\n        <li class=\"nav-item\" routerLinkActive=\"active\">\n          <a class=\"nav-link\" routerLink=\"lanzamientos\">Lanzamientos</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" routerLink=\"BackendJava\">BackendJava</a>\n        </li>\n      </ul>\n    </div>\n</nav>\n  ","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}